doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Javascript testing with Jasmine 2.0

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article(class='total')

      section(class='total')
        h2 
          span Web app 
          span(style='color:#14B876')  smart
          span  testing
        h2
          img(src='images/jasmine.svg', class='avatar avatar--small')
          img(src='images/karma.png', class='avatar avatar--small')
          img(src='images/grunt.png', class='avatar avatar--small')

      section(class='normalSlide')
        h2 About us
        pre(class='code--small')
          code.language-javascript.
            var authors = {
              tito: {
                name: 'Augusto Altman Quaranta',
                worksAt: {
                    corp: 'Intel Corporation',
                    site: 'ASDC',
                    project: 'TrueKey'
                }
              }
              javi: {
                name: 'Javier Glatstein',
                worksAt: {
                    corp: 'Intel Corporation',
                    site: 'ASDC',
                    project: 'TrueKey'
                }
              }
            } 

      section(class='gif gif--testing')
        h1 Testing Javascript

      section(class='titleSlide')
        h1
          img(src='images/jasmine.svg', class='avatar avatar--big')

      section(class='normalSlide')
        h2 Clean syntax
        pre
          code.language-javascript.
            describe("A suite", function() {
              it("contains spec with an expectation", function() {
                expect(true).toBe(true);
              });
            });

      section(class='normalSlide')
        h2 Spy and function mocks
        pre
          code.language-javascript.
            //Create mocks of a function
            spyOn(YCoreSF, 'getStatus').and.callFake(function() {
              console.log('Mocking a function!');
            });

            //Monitoring a function
            spyOn(this.component, 'check');
            this.component.verifyPassword();
            expect(this.component.check).toHaveBeenCalled();

      section(class='normalSlide')
        h2 Custom matchers
        h3 A matcher is a compare function
        pre(class='code--small')
          code.language-javascript.
            //To define a custom matcher
            var customMatchers = {
              toBeGoofy: function(util, customEqualityTesters) {
                return {
                  compare: function(actual, expected) {
                    return {
                      pass: //Custom matcher result
                      message: //Custom matcher message
                    };
                  }
                };
              }
            };

            //To load a custom matcher
            jasmine.addMatchers(customMatchers);

      section(class='normalSlide')
        h2 Easy testing of async assertions
        pre
          code.language-javascript.
            it("should do something", function(done) {
              testTarget(function(data) {
                expect(data).toEqual("javascript!");
                done();
              });
            });

      section(class='normalSlide')
        h2 Test project setup
        h3 Spec runner
        pre(class='code--small')
          code.language-markup.
            &lt;html&gt;
            &lt;head&gt;
              &lt;link rel="shortcut icon" type="image/png" href="lib/jasmine-2.0.3/jasmine_favicon.png"&gt;
              &lt;link rel="stylesheet" type="text/css" href="lib/jasmine-2.0.3/jasmine.css"&gt;

              &lt;script type="text/javascript" src="lib/jasmine-2.0.3/jasmine.js"&gt;&lt;/script&gt;
              &lt;script type="text/javascript" src="lib/jasmine-2.0.3/jasmine-html.js"&gt;&lt;/script&gt;
              &lt;script type="text/javascript" src="lib/jasmine-2.0.3/boot.js"&gt;&lt;/script&gt;

              &lt;!-- include source files here... --&gt;

              &lt;!-- include spec files here... --&gt;
            &lt;/head&gt;

            &lt;body&gt;
            &lt;/body&gt;
            &lt;/html&gt;

      section(class='normalSlide')
        h2 Test project setup
        h3 Example on jsfidle
        <iframe width="100%" height="300" src="http://jsfiddle.net/augustoaltman/2g6062cd/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

      section(class='normalSlide')
        h1(class='highlight') But...
        h2 
          span Just writing the test is usually 
          span(class='highlight') not enough

      section(class='normalSlide')
        h2 We'll also need to
        ul
          li Mantain the spec runner
          li Run the tests in multiple browsers
          li Calculate test coverage
          li Generate reports
          li
            h3(class='highlight') and much more...

      section(class='gif gif--lazy')
        h1 Too much work

      section(class='titleSlide')
        h1
          img(src='images/karma.png', class='avatar avatar--big')

      section(class='normalSlide')
        h2 Installation
        pre
          code.language-javascript.
            # Install Karma command line globally:
            $ npm install -g karma-cli

            # Install Karma locally to your project:
            $ npm install karma --save-dev

            # Install plugins that your project needs:
            $ npm install karma-jasmine karma-chrome-launcher --save-dev

      section(class='normalSlide')
        h2 Configuration and usage
        pre
          code.language-javascript.
            # Start the configuration wizard
            $ karma init my.conf.js

            # Start Karma using your configuration:
            $ karma start my.conf.js

      section(class='normalSlide')
        h2 Karma plugins
        ul
          li karma-jasmine
          li karma-requirejs
          li karma-chrome-launcher
          li karma-firefox-launcher
          li karma-ie-launcher
          li karma-phantomjs-launcher
          li karma-safari-launcher
          li karma-html-reporter
          li karma-coverage
          li
            h3(class='highlight') and much more...

      section(class='normalSlide')
        h2 
          span(class='highlight') Building 
          span javascript code is usually related to a set of 
          span(class='highlight') repetitive tasks
        ul
          li Running jshint checks
          li Code concatenation
          li Code minification
          li Copying files to the right place
          li And of course testing
          li 
            h1(class='highlight') So...

      section(class='gif gif--surprise')
        h1 What about a build process?

      section(class='titleSlide')
        h1
          img(src='images/gruntText.png', class='avatar avatar--big')

      section(class='normalSlide')
        h2 Installation
        pre
          code.language-javascript.
            # Install Grunt command line globally:
            $ npm install -g grunt-cli

            # Install Grunt locally to your project:
            $ npm install grunt --save-dev

            # Install plugins that your project needs:
            npm install grunt-contrib-concat --save-dev

      section(class='normalSlide')
        h2 Configuration
        h3 Gruntfile.js
        pre(class='code--small')
          code.language-javascript.
            module.exports = function(grunt) {
              // Project configuration.
              grunt.initConfig({
                taskA: {}, //taskA configuration
                taskB: {}  //taskB configuration
              });

              // Load the plugins that provides the taskA and taskB tasks
              grunt.loadNpmTasks('grunt-contrib-taskA');
              grunt.loadNpmTasks('grunt-contrib-taskB');

              // Defining task(s) as task's list.
              grunt.registerTask('someSetOfTasks', ['taskA', 'taskB']);

              // Default task(s).
              grunt.registerTask('default', ['someSetOfTasks']);
            };

      section(class='normalSlide')
        h2 Usage
        pre
          code.language-javascript.
            # Run the taskA:
            $ grunt taskA

            # Run the someSetOfTasks:
            $ grunt someSetOfTasks

            # Run the default task:
            $ grunt

      section(class='normalSlide')
        h2 Grunt plugins
        ul
          li grunt-contrib-concat
          li grunt-contrib-copy
          li grunt-contrib-uglify
          li grunt-contrib-jshint
          li grunt-contrib-jasmine
          li
            h3(class='highlight') and much more...

      section(class='normalSlide')
        h2 
          span And all this 
          span(class='highlight') leads 
          span us 
          span(class='highlight') to...

      section(class='gif gif--excited')
        h1 Integrating Karma in the process

      section(class='titleSlide')
        h2 Karma's Grunt plugin

      section(class='normalSlide')
        h2 Installation
        pre
          code.language-javascript.
            # Install the Karma's Grunt plugin
            $ npm install grunt-karma --save-dev

      section(class='normalSlide')
        h2 Basic task configuration
        pre(class='code--small')
          code.language-javascript.
            module.exports = function(grunt) {
              // Project configuration.
              grunt.initConfig({
                karma: { //karma task configuration
                  someConf: {
                    configFile: 'karma.conf.js'
                  },
                  anotherConf: {
                    configFile: 'karma2.conf.js'
                  }
                }
              });

              // Load the karma's plugin
              grunt.loadNpmTasks('grunt-karma');
            };

        pre(class='code--small')
          code.language-javascript.
            # Run
            $ grunt karma:someConf

      section(class='normalSlide')
        h2 Advanced task configuration
        h3 Overriding the Karma's config file options
        pre(class='code--small')
          code.language-javascript.
            grunt.initConfig({
              karma: { //karma task configuration
                someConf: {
                  configFile: 'karma.conf.js', 
                  runnerPort: 9999,
                  singleRun: true,
                  browsers: ['PhantomJS'],
                  logLevel: 'ERROR',
                  //And more options to override
                },
                anotherConf: {
                  configFile: 'karma2.conf.js'
                }
              }
            });

      section(class='normalSlide')
        h2 Advanced task configuration
        h3 Sharing configurations between tasks
        pre(class='code--small')
          code.language-javascript.
            grunt.initConfig({
              karma: {
                options: { //Base configuration
                  configFile: 'karma.conf.js',
                  runnerPort: 9999,
                  browsers: ['Chrome', 'Firefox']
                },
                someConf: {
                  singleRun: true,
                  browsers: ['PhantomJS']
                },
                anotherConf: {
                  reporters: 'dots'
                }
              }
            });

      section(class='normalSlide')
        h2 Advanced task configuration
        h3 Creating a karma's configuration directly from the Grunt's config file
        pre(class='code--small')
          code.language-javascript.
            grunt.initConfig({
              karma: {
                someConf: {
                  options: {
                    files: ['test/**/*.js'],
                    runnerPort: 9999,
                    browsers: ['Chrome', 'Firefox']
                  }
                },
                anotherConf: {
                  configFile: 'karma2.conf.js'
                }
              }
            });

      section(class='normalSlide')
        h2 Tests in the build process
        h3 Jasmine over Karma over Grunt
        pre(class='code--small')
          code.language-javascript.
            grunt.initConfig({
              jshint: {}, //Configurate the jshint task
              concat: {}, //Configurate the concat task
              uglify: {}, //Configurate the uglify task
              karma: {}, //Configurate the karma task
              copy: {} //Configurate the copy task
            });

            // Defining the deliver task.
            grunt.registerTask('deliver', ['jshint', 'concat', 'uglify', 'karma', 'copy']);

      section(class='normalSlide')
        ul
          li
            h1(class='highlight') Smart testing
          li with  
            span(class='highlight') one command line
          li you can execute a 
            span(class='highlight') complete process
          li including your 
            span(class='highlight') tests
          li that will run over 
            span(class='highlight') different browsers
          li 
            span(class='highlight') generate reports
          li and more...

      section(class='gif gif--clapping')

      section(class='normalSlide')
        h2 
          span(class='highlight') Be smart... always
        h3 Three things that we want you to take
        ul
          li 
            span(class='highlight') Automate everything you can
          li There is no need to execute repetitve task manually
          li 
            span(class='highlight') Use extensible technology
          li One never knows what is going to need in the future
          li 
            span(class='highlight') Don't forget to test your builds
          li If you have a build process include the unit tests on it

      section(class='gif gif--thanks')


    script(src='build/build.js')